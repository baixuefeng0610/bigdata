zk是一个分布式协调服务框架
zk是主从复制的集群，分为leader follower，主节点可提供增删改查，从节点只能提供查询功能。
tickTime心跳时间
initLimit初始化延迟时间，当心跳时间超过tickTime*initLimit这个时间，就会超时
synLimit*tickTime如果leader让follower超过该时间，则认为follower有问题



czxid 创建时间
mzxid 修改时间
pzxid 父节点事务id
客户端连接create -e /xx 创建一个临时节点，此时会有一个sessionId，当客户端断开，此session就结束
zk在创建目录的时候，防止多个客户端创建目录同名，只需要加-s  创建的目录就会自带序列，而且序列不会重复，序列是不断增加的。
zk中每个节点存储的都是1M的数据。


zk可以做的事情：1、统一配置管理 1M数据。
2、分组管理 path结构
3、统一命名  序列
4、同步  临时节点


分布式锁，临时节点-》锁依托一个父节点且具备：代表父节点下可以有多把锁。-》队列式事务的锁
以上这个高阶操作，需要客户端写代码操作。


netstate -natp | egrep '(2888|3888)' 只过滤出2888和3888的端口


扩展性：zk中的角色有leader、follower、observer，当leader挂了，参与投票的只有follower、当选出新的leader、observer会从leader同步数据。
observer是放大查询能力。所有的增删改都在leader上进行。
可靠性：

paxos  分布式一致性算法

ZAB 原子广播协议
原子：成功、失败  没有其他中间状态
广播：分布式中的所有节点都知道
zk的数据状态在内存，用磁盘保存日志。


选举新的leader的原则：
1、那个节点的事务id Zxid最大
2、myid最大
一般过半通过的数据才是真数据，也就是你能看到的zxid

ZK选举过程：
1、两两节点通过3888端口进行通信，选出一个leader，选出leader后，leader开启2888端口，后序创建节点能事务操作都是通过2888进行通信。
2、只要存活的节点，有一个人发起投票，都会触发准leader发起自己的投票，投票的原则就是依据上述的两个原则，别的节点通过与其他节点发送自己的事务id和myid来确定自己是否可以当leader，
当另一个节点受到别的节点的信息，与自身的myid和zxid比较，如果比自己的小，则不给该节点投票，如果大于当前节点信息，则给该节点投票。
3、推选制原则：先比较zxid，如果zxid相同在比较myid






zk分布式锁：
1、争抢锁，只有一个人能够获得锁；

2、为了避免死锁，获得锁的人出问题，使用临时节点，当客户端session断开后，就会释放锁

3、获得锁的人成功了，释放锁

4、锁被释放、删除，别人如何知道。

4.1主动轮询，心跳，这种方式 弊端：延迟，压力（会有很多节点轮询有压力）
4.2watcher 可以解决延迟，弊端：压力

4.3 sequence+watcher，watcher前一个，最小的获得锁


